version: '3.1'

services:
  jenkins:
    container_name: jenkins
    build:
      context: .
      dockerfile: ./docker-jenkins/Dockerfile
    restart: always
    ports:
      - "8888:8080"
    expose:
      - "8080"
    volumes:
      - '/jenkins:/var/jenkins_home'
      - '/var/run/docker.sock:/var/run/docker.sock -u root jenkins'

  mongors1:
    container_name: mongors1
    build:
      context: .
      dockerfile: ./docker-mongo/Dockerfile
#    restart: always
    ports:
      - "10001:27017"
    expose:
      - "27017"
    volumes:
      - '/mongoRs/mongoRs1:/data/db'
    command: mongod --replSet replicaSet --bind_ip_all
    networks:
      - mongo-networks

  mongors2:
    container_name: mongors2
    image: "mongo"
#    restart: always
    ports:
      - "10002:27017"
    expose:
      - "27017"
    volumes:
      - '/mongoRs/mongoRs2:/data/db'
    command: mongod --replSet replicaSet --bind_ip_all
    networks:
      - mongo-networks
    depends_on:
      - mongors1

  mongors3:
    container_name: mongors3
    image: "mongo"
#    restart: always
    ports:
      - "10003:27017"
    expose:
      - "27017"
    volumes:
      - '/mongoRs/mongoRs3:/data/db'
    command: mongod --replSet replicaSet --bind_ip_all
    networks:
      - mongo-networks
    depends_on:
      - mongors2

  node1:
    container_name: docker-node1
    #    restart: always
    build:  # 이미지를 사용 할 것이 아니기 때문에 build 사용
      context: .  # docker build를 실행 할 디렉토리  . 으로 했기 떄문에 현재 위치
      dockerfile: ./Dockerfile  # 빌드에 사용 될 Dockerfile
    ports:  # 외부 포트와 컨테이너 포트 연결
      - "4997:5000"
    networks:
      - mongo-networks
    depends_on:
      - mongors3

  node2:
    container_name: docker-node2
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - "4998:5000"
    networks:
      - mongo-networks
    depends_on:
      - mongors3

  node3:
    container_name: docker-node3
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - "4999:5000"
    networks:
      - mongo-networks
    depends_on:
      - mongors3

  nginx:
    container_name: nginx
    image: nginx
#    restart: always
    volumes:
      - './nginx/templates:/etc/nginx/templates'
      - './nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf'
    expose:
      - "8090"
    ports:
      - "4000:4000"
    networks:
      - mongo-networks
    depends_on:
      - node3

networks:
  mongo-networks:
    driver: bridge